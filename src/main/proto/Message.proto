//定义protobuf的包名称空间

option java_package = "com.crazymakercircle.im.common.bean.msg";

// 消息体名称
option java_outer_classname = "ProtoMsg";

// IM 系统中的protobuf 消息格式的设计
// 一般来说，网络通信涉及消息的定义，不管是直接使用二进制格式，还是XML, JSON 等字符串格式，大体都可以分为3大消息类型
// 1. 请求消息
// 2. 应答消息
// 3. 命令消息
// 每个消息基本上去会包含一个序列号和一个类型定义，序列号用来唯一区分一个消息， 类型用来决定消息的处理方式 。
// Protobuf消息格式，大致有以下几个可供参数的原则
// 原则一，消息类型使用enum定义
// 什么是序列号呢？序列号主要用于请求数据包Request 和响应数据包Response的配套，Response的值必须是Request相同，使得发送端可以进行请求-响应的匹配处理
// 下面是一份完整的聊天的.proto 协议文件的定义 。
enum HeadType
{
  LOGIN_REQUEST = 1;//登陆请求
  LOGIN_RESPONSE = 2;//登录响应
  LOGOUT_REQUEST = 3;//退出请求
  LOGOUT_RESPONSE = 4;  // 心跳请求
  KEEPALIVE_REQUEST = 5;//心跳请求PING;
  KEEPALIVE_RESPONSE = 6;   // 聊天消息请求
  MESSAGE_REQUEST = 7;//消息请求;
  MESSAGE_RESPONSE = 8;//消息回执;
  MESSAGE_NOTIFICATION = 9;//通知消息
}

/*登录信息*/
// LoginRequest对应的HeadType为Login_Request
// 消息名称去掉下划线，更加符合Java 的类名规范
message LoginRequest{
	required string uid = 1;        // 用户唯一id
	required string deviceId = 2;     // 设备ID
	required string token = 3;       // 用户token
	optional uint32 platform = 4;      //客户端平台 windows、mac、android、ios、web
	optional string app_version = 5;    // APP版本号
}

//token说明: 账号服务器登录时生成的Token

/*登录响应*/

message LoginResponse{
    required bool  result = 1; //true 表示成功，false表示失败
    required uint32 code = 2;	//错误码
    required string info = 3;	//错误描述
    required uint32 expose = 4;	//错误描述是否提示给用户:1 提示;0 不提示
}



/*聊天消息*/
message MessageRequest{
	 uint64 msg_id = 1;		//消息id
	 string from = 2;		//发送方sessionId
	 string to = 3;			//接收方sessionId
	 uint64 time = 4;		//时间戳(单位:毫秒)
	 required uint32 msg_type = 5;	//消息类型  1：纯文本  2：音频 3：视频 4：地理位置 5：其他
	 string content = 6;	//消息内容
	 string url = 7;		//多媒体地址
	 string property = 8;	//附加属性
	 string from_nick = 9;	//发送者昵称
	 optional string json = 10;		//附加的json串
}

/*聊天响应*/
// 原则三：建议给应答消息加上成功标记和应答序号
// 对于应答消息并非是成功的，因此建议在应答消息中加上两个字段：成功标记和应答序号,成功标记是一个用于描述应答是否成功的标记，建议使用boolean类型
// true表示发送成功。false不服水土发送失败
// 建议设置info字段为字符串，用于旋转失败的提示信息
// 应答序号的作用是什么呢？如果一个请求有多个响应，则发送端可以设计为，每一个响应消息可以包含一个应答的序号，最后一个响应消息包含一个结束标记，接收端
// 在处理的时候，根据应答序号和结束标记，可以合并所有的响应消息。
// 对应于聊天响应类型-MessageResponse 类型的消息， Protobuf message消息结构如下 ：
message MessageResponse
{
    required bool result = 1; //true表示发送成功，false表示发送失败
    required uint32 code = 2;	//错误码
    required string info = 3;	//错误描述
    required uint32 expose = 4; //错误描述是否提示给用户:1 提示;0 不提示
    required bool last_block = 5;         // 是否为最后的应答
    required fixed32 block_index = 6;  // 应答的序号
}

/*通知消息*/
message MessageNotification
{
 required uint32 msg_type = 1;	//通知类型 1 上线 2 下线 ...
 required bytes sender = 2;
 required string json = 3;
 required string timestamp = 4;
}

/*顶层消息*/
//顶层消息是一种嵌套消息，嵌套了各种类型消息
//内部的消息类型，全部使用optional字段
//根据消息类型 type的值，最多只有一个有效
// 原则四，编解码从顶层消息开始
// 建议定义一个外层的消息，把所有的消息类型全部封装在一起，在通信的时候，可以从外层消息开始编码或者解码 。
// 对应于聊天器中的外层消息， Protobuf message消息的结构大致如下 ：

message Message
{
 required HeadType type = 1; //消息类型
 required uint64   sequence = 2;//消息系列号
 required string  session_id = 3;       // 会话Id
 optional LoginRequest loginRequest = 4;  // 登陆请求
 optional LoginResponse loginResponse = 5;    // 登陆响应
 optional MessageRequest messageRequest = 6;      // 聊天请求
 optional MessageResponse messageResponse = 7;      // 聊天响应
 optional MessageNotification notification = 8;         // 通知消息
}


// sequence 消息系列号
// 主要用于Request和Response，Response的值必须和Request相同，使得发送端可以进行事务匹配处理

